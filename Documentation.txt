* * * * * * * * * *
* Interpreter.py  *
* * * * * * * * * *

The interpreter is the program a user can use to parse a file containing a program written in the toy language. It accepts file names to interpret from the command line. To parse a program file called 'program1' a user would enter `python3 Interpreter.py program1` on the command line.

To run all test files execute the following command from the :
python3 Interpreter.py test_files/test1 test_files/test2 test_files/test3 test_files/test4


* * * * * * *
* Parser.py *
* * * * * * *

The Parser is a recursive descent parser that takes with some text and recursively parses the text using the CFG above, starting at the program level, until an EOF token or an error is found. Variable names and values are stored and updated in a dictionary representing a symbol table.

To construct a recursive descent parser, ambiguity must be removed from the context free grammar for the toy language given in the assignment statement:

    Program ::= Assignment*
    Assignment ::= Identifier = Exp;
    Exp ::= Term Exp'
    Exp' ::= + Term Exp' | - Term Exp' | null
    Term ::= Fact Term'
    Term' ::= * Fact Term' | null
    Fact ::= ( Exp ) | - Fact | + Fact | Literal | Identifier
    Identifier ::= Letter [Letter | Digit]*
    Letter ::= a|...|z|A|...|Z|_
    Literal ::= 0 | [1-9] [0-9]*


* * * * * * * * *
* Tokenizer.py  *
* * * * * * * * *

The Tokenizer is used to extract tokens and their type from some text, which are then returned as a dictionary for the Parser to use in its syntax analysis.

The constructor takes in the text to be tokenized, and the read_next_token() function is used to extract and return the next token in the text and its type, return an 'EOF' token if no more text is present, or raise an exception if an unrecognized character is found.